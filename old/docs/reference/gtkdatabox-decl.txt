<MACRO>
<NAME>GTK_DATABOX_TYPE_MARKERS</NAME>
#define GTK_DATABOX_TYPE_MARKERS		  (gtk_databox_markers_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_MARKERS</NAME>
#define GTK_DATABOX_MARKERS(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_MARKERS, \
                                           GtkDataboxMarkers))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_MARKERS_CLASS</NAME>
#define GTK_DATABOX_MARKERS_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_MARKERS, \
                                           GtkDataboxMarkersClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_MARKERS</NAME>
#define GTK_DATABOX_IS_MARKERS(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_MARKERS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_MARKERS_CLASS</NAME>
#define GTK_DATABOX_IS_MARKERS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_MARKERS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_MARKERS_GET_CLASS</NAME>
#define GTK_DATABOX_MARKERS_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_MARKERS, \
                                           GtkDataboxMarkersClass))
</MACRO>
<ENUM>
<NAME>GtkDataboxMarkersPosition</NAME>
   typedef enum
   {
      GTK_DATABOX_MARKERS_C = 0,
      GTK_DATABOX_MARKERS_N,
      GTK_DATABOX_MARKERS_E,
      GTK_DATABOX_MARKERS_S,
      GTK_DATABOX_MARKERS_W
   }
   GtkDataboxMarkersPosition;
</ENUM>
<ENUM>
<NAME>GtkDataboxMarkersTextPosition</NAME>
   typedef enum
   {
      GTK_DATABOX_MARKERS_TEXT_CENTER = 0,/* text centered   on marker */
      GTK_DATABOX_MARKERS_TEXT_N,	  /* text north      of marker */
      GTK_DATABOX_MARKERS_TEXT_NE,	  /* text north-east of marker */
      GTK_DATABOX_MARKERS_TEXT_E,	  /* text east       of marker */
      GTK_DATABOX_MARKERS_TEXT_SE,	  /* text south-east of marker */
      GTK_DATABOX_MARKERS_TEXT_S,	  /* text south      of marker */
      GTK_DATABOX_MARKERS_TEXT_SW,	  /* text south-west of marker */
      GTK_DATABOX_MARKERS_TEXT_W,	  /* text west       of marker */
      GTK_DATABOX_MARKERS_TEXT_NW	  /* text north-west of marker */
   }
   GtkDataboxMarkersTextPosition;
</ENUM>
<ENUM>
<NAME>GtkDataboxMarkersType</NAME>
   typedef enum
   {
      GTK_DATABOX_MARKERS_NONE = 0,	/* No Marker (just text) */
      GTK_DATABOX_MARKERS_TRIANGLE,	/* Marker is a triangle */
      GTK_DATABOX_MARKERS_SOLID_LINE,	/* Marker is a solid line */
      GTK_DATABOX_MARKERS_DASHED_LINE	/* Marker is a dashed line */
   }
   GtkDataboxMarkersType;
</ENUM>
<STRUCT>
<NAME>GtkDataboxMarkersPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxMarkers</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxMarkersClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_DATABOX_TYPE_OFFSET_BARS</NAME>
#define GTK_DATABOX_TYPE_OFFSET_BARS		  (gtk_databox_offset_bars_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_OFFSET_BARS</NAME>
#define GTK_DATABOX_OFFSET_BARS(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_OFFSET_BARS, \
                                           GtkDataboxOffsetBars))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_OFFSET_BARS_CLASS</NAME>
#define GTK_DATABOX_OFFSET_BARS_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_OFFSET_BARS, \
                                           GtkDataboxOffsetBarsClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_OFFSET_BARS</NAME>
#define GTK_DATABOX_IS_OFFSET_BARS(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_OFFSET_BARS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_OFFSET_BARS_CLASS</NAME>
#define GTK_DATABOX_IS_OFFSET_BARS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_OFFSET_BARS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_OFFSET_BARS_GET_CLASS</NAME>
#define GTK_DATABOX_OFFSET_BARS_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_OFFSET_BARS, \
                                           GtkDataboxOffsetBarsClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxOffsetBarsPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxOffsetBars</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxOffsetBarsClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDatabox</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxGraph</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_DATABOX_TYPE_GRID</NAME>
#define GTK_DATABOX_TYPE_GRID		  (gtk_databox_grid_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_GRID</NAME>
#define GTK_DATABOX_GRID(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_GRID, \
                                           GtkDataboxGrid))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_GRID_CLASS</NAME>
#define GTK_DATABOX_GRID_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_GRID, \
                                           GtkDataboxGridClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_GRID</NAME>
#define GTK_DATABOX_IS_GRID(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_GRID))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_GRID_CLASS</NAME>
#define GTK_DATABOX_IS_GRID_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_GRID))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_GRID_GET_CLASS</NAME>
#define GTK_DATABOX_GRID_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_GRID, \
                                           GtkDataboxGridClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxGridClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxGridPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxGrid</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_DATABOX</NAME>
#define GTK_TYPE_DATABOX		  (gtk_databox_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX</NAME>
#define GTK_DATABOX(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_TYPE_DATABOX, \
                                           GtkDatabox))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_CLASS</NAME>
#define GTK_DATABOX_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_TYPE_DATABOX, \
                                           GtkDataboxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_DATABOX</NAME>
#define GTK_IS_DATABOX(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_TYPE_DATABOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_DATABOX_CLASS</NAME>
#define GTK_IS_DATABOX_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_TYPE_DATABOX))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_GET_CLASS</NAME>
#define GTK_DATABOX_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_TYPE_DATABOX, \
                                           GtkDataboxClass))
</MACRO>
<STRUCT>
<NAME>GtkDatabox</NAME>
struct _GtkDatabox
{
    /*< private >*/
    GtkWidget box;

    GtkDataboxPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkDataboxClass</NAME>
struct _GtkDataboxClass
{
    GtkWidgetClass parent_class;

    void (*zoomed) (GtkDatabox * box);
    void (*selection_started) (GtkDatabox * box,
                               GtkDataboxValueRectangle * selectionValues);
    void (*selection_changed) (GtkDatabox * box,
                               GtkDataboxValueRectangle * selectionValues);
    void (*selection_finalized) (GtkDatabox * box,
                                 GtkDataboxValueRectangle *
                                 selectionValues);
    void (*selection_canceled) (GtkDatabox * box);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_databox_get_type</NAME>
<RETURNS>GType  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_graph_add</NAME>
<RETURNS>gint  </RETURNS>
GtkDatabox * box, GtkDataboxGraph * graph 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_graph_add_front</NAME>
<RETURNS>gint  </RETURNS>
GtkDatabox * box, GtkDataboxGraph * graph 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_graph_remove</NAME>
<RETURNS>gint  </RETURNS>
GtkDatabox * box, GtkDataboxGraph * graph 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_graph_remove_all</NAME>
<RETURNS>gint  </RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_auto_rescale</NAME>
<RETURNS>gint  </RETURNS>
GtkDatabox * box, gfloat border 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_calculate_extrema</NAME>
<RETURNS>gint  </RETURNS>
GtkDatabox * box, gfloat * min_x, gfloat * max_x, gfloat * min_y, gfloat * max_y 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_total_limits</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, gfloat left, gfloat right, gfloat top, gfloat bottom 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_visible_limits</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, gfloat left, gfloat right, gfloat top, gfloat bottom 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_total_limits</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, gfloat * left, gfloat * right, gfloat * top, gfloat * bottom 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_visible_limits</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, gfloat * left, gfloat * right, gfloat * top, gfloat * bottom 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_adjustment_x</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, GtkAdjustment * adj 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_adjustment_y</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, GtkAdjustment * adj 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_adjustment_x</NAME>
<RETURNS>GtkAdjustment  *</RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_adjustment_y</NAME>
<RETURNS>GtkAdjustment  *</RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_ruler_x</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_ruler_y</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_ruler_x</NAME>
<RETURNS>GtkDataboxRuler  *</RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_ruler_y</NAME>
<RETURNS>GtkDataboxRuler  *</RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_scale_type_x</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, GtkDataboxScaleType scale_type 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_scale_type_y</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, GtkDataboxScaleType scale_type 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_scale_type_x</NAME>
<RETURNS>GtkDataboxScaleType  </RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_scale_type_y</NAME>
<RETURNS>GtkDataboxScaleType  </RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_enable_selection</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, gboolean enable 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_enable_zoom</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, gboolean enable 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_set_box_shadow</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, GtkShadowType which_shadow 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_enable_selection</NAME>
<RETURNS>gboolean  </RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_enable_zoom</NAME>
<RETURNS>gboolean  </RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox__get_box_shadow</NAME>
<RETURNS>GtkShadowType  </RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_zoom_to_selection</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_zoom_out</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_zoom_home</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_value_to_pixel_x</NAME>
<RETURNS>gint16  </RETURNS>
GtkDatabox * box, gfloat value 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_value_to_pixel_y</NAME>
<RETURNS>gint16  </RETURNS>
GtkDatabox * box, gfloat value 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_pixel_to_value_x</NAME>
<RETURNS>gfloat  </RETURNS>
GtkDatabox * box, gint16 pixel 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_pixel_to_value_y</NAME>
<RETURNS>gfloat  </RETURNS>
GtkDatabox * box, gint16 pixel 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_values_to_pixels</NAME>
<RETURNS>void  </RETURNS>
GtkDatabox * box, guint len, const gfloat * values_x, const gfloat * values_y, GdkPoint * pixels 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_create_box_with_scrollbars_and_rulers</NAME>
<RETURNS>void  </RETURNS>
GtkWidget ** p_box, GtkWidget ** p_table, gboolean scrollbar_x, gboolean scrollbar_y, gboolean ruler_x, gboolean ruler_y 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_create_box_with_scrollbars_and_rulers_positioned</NAME>
<RETURNS>void </RETURNS>
GtkWidget ** p_box, GtkWidget ** p_table, gboolean scrollbar_x, gboolean scrollbar_y, gboolean ruler_x, gboolean ruler_y, gboolean ruler_x_top, gboolean ruler_y_left 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_get_backing_pixmap</NAME>
<RETURNS>GdkPixmap * </RETURNS>
GtkDatabox * box 
</FUNCTION>
<STRUCT>
<NAME>GtkDataboxPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_DATABOX_TYPE_CROSS_SIMPLE</NAME>
#define GTK_DATABOX_TYPE_CROSS_SIMPLE		  (gtk_databox_cross_simple_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_CROSS_SIMPLE</NAME>
#define GTK_DATABOX_CROSS_SIMPLE(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_CROSS_SIMPLE, \
                                           GtkDataboxCrossSimple))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_CROSS_SIMPLE_CLASS</NAME>
#define GTK_DATABOX_CROSS_SIMPLE_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_CROSS_SIMPLE, \
                                           GtkDataboxCrossSimpleClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_CROSS_SIMPLE</NAME>
#define GTK_DATABOX_IS_CROSS_SIMPLE(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_CROSS_SIMPLE))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_CROSS_SIMPLE_CLASS</NAME>
#define GTK_DATABOX_IS_CROSS_SIMPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_CROSS_SIMPLE))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_CROSS_SIMPLE_GET_CLASS</NAME>
#define GTK_DATABOX_CROSS_SIMPLE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_CROSS_SIMPLE, \
                                           GtkDataboxCrossSimpleClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxCrossSimple</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxCrossSimpleClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxCrossSimplePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_DATABOX_TYPE_POINTS</NAME>
#define GTK_DATABOX_TYPE_POINTS		  (gtk_databox_points_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_POINTS</NAME>
#define GTK_DATABOX_POINTS(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_POINTS, \
                                           GtkDataboxPoints))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_POINTS_CLASS</NAME>
#define GTK_DATABOX_POINTS_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_POINTS, \
                                           GtkDataboxPointsClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_POINTS</NAME>
#define GTK_DATABOX_IS_POINTS(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_POINTS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_POINTS_CLASS</NAME>
#define GTK_DATABOX_IS_POINTS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_POINTS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_POINTS_GET_CLASS</NAME>
#define GTK_DATABOX_POINTS_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_POINTS, \
                                           GtkDataboxPointsClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxPointsPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxPointsClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxPoints</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_DATABOX_TYPE_LINES</NAME>
#define GTK_DATABOX_TYPE_LINES		  (gtk_databox_lines_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_LINES</NAME>
#define GTK_DATABOX_LINES(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_LINES, \
                                           GtkDataboxLines))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_LINES_CLASS</NAME>
#define GTK_DATABOX_LINES_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_LINES, \
                                           GtkDataboxLinesClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_LINES</NAME>
#define GTK_DATABOX_IS_LINES(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_LINES))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_LINES_CLASS</NAME>
#define GTK_DATABOX_IS_LINES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_LINES))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_LINES_GET_CLASS</NAME>
#define GTK_DATABOX_LINES_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_LINES, \
                                           GtkDataboxLinesClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxLinesClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxLines</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxLinesPrivate</NAME>
</STRUCT>
<ENUM>
<NAME>GtkDataboxScaleType</NAME>
typedef enum
{
   GTK_DATABOX_SCALE_LINEAR = 0,
   GTK_DATABOX_SCALE_LOG2,
   GTK_DATABOX_SCALE_LOG
}
GtkDataboxScaleType;
</ENUM>
<FUNCTION>
<NAME>gtk_databox_scale_type_get_type</NAME>
<RETURNS>GType  </RETURNS>
void 
</FUNCTION>
<MACRO>
<NAME>log2</NAME>
#define log2(x) (log(x)/log(2))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_TYPE_RULER</NAME>
#define GTK_DATABOX_TYPE_RULER            (gtk_databox_ruler_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_RULER</NAME>
#define GTK_DATABOX_RULER(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_DATABOX_TYPE_RULER, GtkDataboxRuler))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_RULER_CLASS</NAME>
#define GTK_DATABOX_RULER_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_DATABOX_TYPE_RULER, GtkDataboxRulerClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_RULER</NAME>
#define GTK_DATABOX_IS_RULER(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_DATABOX_TYPE_RULER))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_RULER_CLASS</NAME>
#define GTK_DATABOX_IS_RULER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_DATABOX_TYPE_RULER))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_RULER_GET_CLASS</NAME>
#define GTK_DATABOX_RULER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_DATABOX_TYPE_RULER, GtkDataboxRulerClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_RULER_MAX_MAX_LENGTH</NAME>
#define GTK_DATABOX_RULER_MAX_MAX_LENGTH 63
</MACRO>
<STRUCT>
<NAME>GtkDataboxRuler</NAME>
struct _GtkDataboxRuler
{
   GtkWidget widget;

   GtkDataboxRulerPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkDataboxRulerClass</NAME>
struct _GtkDataboxRulerClass
{
   GtkWidgetClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_databox_ruler_get_type</NAME>
<RETURNS>GType </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkOrientation orientation 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_range</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gdouble lower, gdouble upper, gdouble position 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_max_length</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, guint max_length 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_scale_type</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, guint scale_type 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_range</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gdouble * lower, gdouble * upper, gdouble * position 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_max_length</NAME>
<RETURNS>guint  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_scale_type</NAME>
<RETURNS>GtkDataboxScaleType  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_orientation</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, GtkOrientation orientation 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_orientation</NAME>
<RETURNS>GtkOrientation  </RETURNS>
GtkDataboxRuler *ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_text_orientation</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, GtkOrientation orientation 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_text_orientation</NAME>
<RETURNS>GtkOrientation  </RETURNS>
GtkDataboxRuler *ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_text_alignment</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, PangoAlignment alignment 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_text_alignment</NAME>
<RETURNS>PangoAlignment  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_text_hoffset</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler,gint offset 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_text_hoffset</NAME>
<RETURNS>gint  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_draw_ticks</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gboolean draw 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_draw_ticks</NAME>
<RETURNS>gboolean  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_draw_position</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gboolean draw 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_draw_position</NAME>
<RETURNS>gboolean  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_draw_subticks</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gboolean draw 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_draw_subticks</NAME>
<RETURNS>gboolean  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_invert_edge</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gboolean invert 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_invert_edge</NAME>
<RETURNS>gboolean  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_linear_label_format</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gchar *format 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_log_label_format</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gchar *format 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_linear_label_format</NAME>
<RETURNS>gchar * </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_log_label_format</NAME>
<RETURNS>gchar * </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_manual_ticks</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gfloat* manual_ticks 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_manual_ticks</NAME>
<RETURNS>gfloat * </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_manual_tick_cnt</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, guint manual_tick_cnt 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_manual_tick_cnt</NAME>
<RETURNS>guint  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_manual_tick_labels</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, gchar *labels[] 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_manual_tick_labels</NAME>
<RETURNS>gchar  ** </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_set_box_shadow</NAME>
<RETURNS>void  </RETURNS>
GtkDataboxRuler * ruler, GtkShadowType which_shadow 
</FUNCTION>
<FUNCTION>
<NAME>gtk_databox_ruler_get_box_shadow</NAME>
<RETURNS>GtkShadowType  </RETURNS>
GtkDataboxRuler * ruler 
</FUNCTION>
<STRUCT>
<NAME>GtkDataboxRulerPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>gtk_databox_marshal_VOID__VOID</NAME>
#define gtk_databox_marshal_VOID__VOID	g_cclosure_marshal_VOID__VOID
</MACRO>
<MACRO>
<NAME>gtk_databox_marshal_VOID__POINTER</NAME>
#define gtk_databox_marshal_VOID__POINTER	g_cclosure_marshal_VOID__POINTER
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_TYPE_XYC_GRAPH</NAME>
#define GTK_DATABOX_TYPE_XYC_GRAPH		  (gtk_databox_xyc_graph_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_XYC_GRAPH</NAME>
#define GTK_DATABOX_XYC_GRAPH(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_XYC_GRAPH, \
                                           GtkDataboxXYCGraph))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_XYC_GRAPH_CLASS</NAME>
#define GTK_DATABOX_XYC_GRAPH_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_XYC_GRAPH, \
                                           GtkDataboxXYCGraphClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_XYC_GRAPH</NAME>
#define GTK_DATABOX_IS_XYC_GRAPH(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_XYC_GRAPH))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_XYC_GRAPH_CLASS</NAME>
#define GTK_DATABOX_IS_XYC_GRAPH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_XYC_GRAPH))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_XYC_GRAPH_GET_CLASS</NAME>
#define GTK_DATABOX_XYC_GRAPH_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_XYC_GRAPH, \
                                           GtkDataboxXYCGraphClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxXYCGraphPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxXYCGraphClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxXYCGraph</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_DATABOX_TYPE_REGIONS</NAME>
#define GTK_DATABOX_TYPE_REGIONS		  (gtk_databox_regions_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_REGIONS</NAME>
#define GTK_DATABOX_REGIONS(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_REGIONS, \
                                           GtkDataboxRegions))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_REGIONS_CLASS</NAME>
#define GTK_DATABOX_REGIONS_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_REGIONS, \
                                           GtkDataboxRegionsClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_REGIONS</NAME>
#define GTK_DATABOX_IS_REGIONS(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_REGIONS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_REGIONS_CLASS</NAME>
#define GTK_DATABOX_IS_REGIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_REGIONS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_REGIONS_GET_CLASS</NAME>
#define GTK_DATABOX_REGIONS_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_REGIONS, \
                                           GtkDataboxRegionsClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxRegions</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxRegionsPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxRegionsClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_DATABOX_TYPE_BARS</NAME>
#define GTK_DATABOX_TYPE_BARS		  (gtk_databox_bars_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_BARS</NAME>
#define GTK_DATABOX_BARS(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_BARS, \
                                           GtkDataboxBars))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_BARS_CLASS</NAME>
#define GTK_DATABOX_BARS_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_BARS, \
                                           GtkDataboxBarsClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_BARS</NAME>
#define GTK_DATABOX_IS_BARS(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_BARS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_BARS_CLASS</NAME>
#define GTK_DATABOX_IS_BARS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_BARS))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_BARS_GET_CLASS</NAME>
#define GTK_DATABOX_BARS_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_BARS, \
                                           GtkDataboxBarsClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxBarsPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxBarsClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxBars</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_DATABOX_TYPE_GRAPH</NAME>
#define GTK_DATABOX_TYPE_GRAPH		  (gtk_databox_graph_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_GRAPH</NAME>
#define GTK_DATABOX_GRAPH(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_GRAPH, \
                                           GtkDataboxGraph))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_GRAPH_CLASS</NAME>
#define GTK_DATABOX_GRAPH_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_GRAPH, \
                                           GtkDataboxGraphClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_GRAPH</NAME>
#define GTK_DATABOX_IS_GRAPH(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_GRAPH))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_GRAPH_CLASS</NAME>
#define GTK_DATABOX_IS_GRAPH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_GRAPH))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_GRAPH_GET_CLASS</NAME>
#define GTK_DATABOX_GRAPH_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_GRAPH, \
                                           GtkDataboxGraphClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxGraphPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxGraphClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_DATABOX_TYPE_XYYC_GRAPH</NAME>
#define GTK_DATABOX_TYPE_XYYC_GRAPH		  (gtk_databox_xyyc_graph_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_XYYC_GRAPH</NAME>
#define GTK_DATABOX_XYYC_GRAPH(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
                                           GTK_DATABOX_TYPE_XYYC_GRAPH, \
                                           GtkDataboxXYYCGraph))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_XYYC_GRAPH_CLASS</NAME>
#define GTK_DATABOX_XYYC_GRAPH_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), \
                                           GTK_DATABOX_TYPE_XYYC_GRAPH, \
                                           GtkDataboxXYYCGraphClass))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_XYYC_GRAPH</NAME>
#define GTK_DATABOX_IS_XYYC_GRAPH(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
                                           GTK_DATABOX_TYPE_XYYC_GRAPH))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_IS_XYYC_GRAPH_CLASS</NAME>
#define GTK_DATABOX_IS_XYYC_GRAPH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), \
                                           GTK_DATABOX_TYPE_XYYC_GRAPH))
</MACRO>
<MACRO>
<NAME>GTK_DATABOX_XYYC_GRAPH_GET_CLASS</NAME>
#define GTK_DATABOX_XYYC_GRAPH_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
                                           GTK_DATABOX_TYPE_XYYC_GRAPH, \
                                           GtkDataboxXYYCGraphClass))
</MACRO>
<STRUCT>
<NAME>GtkDataboxXYYCGraph</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxXYYCGraphPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkDataboxXYYCGraphClass</NAME>
</STRUCT>
